{"version":3,"sources":["components/Button/images/black_cat.png","components/Button/images/brown_cat.png","components/Button/images/gray_cat.png","components/Button/images/yellow_cat.png","images/frame.png","components/Button/Button.js","components/Buttons/Buttons.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Button","props","react_default","a","createElement","src","alt","value","className","onClick","Buttons","generateNumber","min","max","Math","floor","random","state","buttons","id","black","_this","brown","gray","yellow","_this2","this","map","button","components_Button_Button","key","Component","App","targetNumber","currentValue","gamesWon","handleClick","event","preventDefault","newValue","parseInt","target","getAttribute","setState","require","components_Buttons_Buttons","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.67c142db.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/black_cat.4b1eb2da.png\";","module.exports = __webpack_public_path__ + \"static/media/brown_cat.1f536498.png\";","module.exports = __webpack_public_path__ + \"static/media/gray_cat.ff6e9d8e.png\";","module.exports = __webpack_public_path__ + \"static/media/yellow_cat.6f62f27b.png\";","module.exports = __webpack_public_path__ + \"static/media/frame.953720e2.png\";","import React from \"react\";\nimport \"./Button.css\";\n\n\nconst Button = (props) => {\n\n  return (\n        \n    <img\n        src={props.src}\n        alt={props.alt}\n        value={props.value}\n        className=\"zoom\"\n        onClick={props.onClick}\n    />\n    \n  )\n\n}\n\nexport default Button;","import React, { Component } from \"react\";\nimport Button from \"../Button/Button.js\";\nimport black from \"../Button/images/black_cat.png\";\nimport brown from \"../Button/images/brown_cat.png\";\nimport gray from \"../Button/images/gray_cat.png\";\nimport yellow from \"../Button/images/yellow_cat.png\";\n\n\nclass Buttons extends Component {\n\n    generateNumber = (min, max) => {\n        const rndNumBtn = Math.floor(Math.random()*(max-min+1)+min);\n        // console.log(rndNumBtn);\n        return rndNumBtn\n      };\n\n    state = {\n        buttons: [\n            {\n                id: \"black\",\n                src: black,\n                alt: \"blackBtn\",\n                value: this.generateNumber(1, 12)\n            },\n            {\n                id: \"brown\",\n                src: brown,\n                alt: \"brownBtn\",\n                value: this.generateNumber(1, 12)\n            },\n            {\n                id: \"gray\",\n                src: gray,\n                alt: \"grayBtn\",\n                value: this.generateNumber(1, 12)\n            },\n            {\n                id: \"yellow\",\n                src: yellow,\n                alt: \"yellowBtn\",\n                value: this.generateNumber(1, 12)\n            }\n        ]\n    };\n\n    render() {\n        return (\n            <div>\n\n                {this.state.buttons.map(button => {\n                    return (\n                        <Button\n                          className={button.id}\n                          key={button.id}\n                          src={button.src}\n                          alt={button.alt}\n                          value={button.value}\n                          onClick={this.props.onClick}\n                        />\n                    )\n                })}\n\n            </div>\n        )\n    }\n}\n\nexport default Buttons;","import React, { Component } from 'react';\nimport './App.css';\nimport Buttons from \"./components/Buttons/Buttons\";\n\n\nclass App extends Component {\n\n  targetNumber = (min, max) => {\n    const targetNum = Math.floor(Math.random()*(max-min+1)+min);\n    // console.log(`Target number = ${targetNum}`);\n\n    return targetNum\n  };\n\n\n  state = {\n    targetNumber: this.targetNumber(19, 120),\n    currentValue: 0,\n    gamesWon: 0,\n  };\n\n    handleClick = (event) => {\n        event.preventDefault();\n        const currentValue = this.state.currentValue;\n        const newValue = parseInt(event.target.getAttribute(\"value\"));\n        this.setState(\n            {currentValue: currentValue + newValue}\n        )\n        // console.log(newValue);\n    }\n\n\n  componentDidUpdate() {\n    if (this.state.currentValue === this.state.targetNumber) {\n      this.setState(\n          {\n            targetNumber: this.targetNumber(19, 120),\n            currentValue: 0,\n            gamesWon: this.state.gamesWon + 1\n          }\n      )\n    }\n    else {\n        if (this.state.currentValue >= this.state.targetNumber) {\n            this.setState(\n                {\n                  targetNumber: this.targetNumber(19, 120),\n                  currentValue: 0,\n                  gamesWon: this.state.gamesWon,\n                }\n            );\n        }\n    }\n  }\n\n\n\n  render() {\n    return (\n\n      <div className=\"App\">\n\n        <img src={require(\"./images/frame.png\")} alt=\"frame\" id=\"instructFrame\" />\n\n        <div className=\"resultsDiv\">\n\n          <div className=\"targetNumber\">\n            Target number = {this.state.targetNumber}\n          </div>\n\n          <div className=\"currentValue\">\n              Current value = {this.state.currentValue}\n          </div>\n        \n          <div className=\"gamesWon\">\n              Games won = {this.state.gamesWon}\n          </div>\n\n        </div>\n\n        <div className=\"buttonGrid\">\n            <Buttons\n                key={this.state.targetNumber} \n                onClick={this.handleClick} \n            />\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}